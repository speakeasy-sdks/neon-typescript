/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * New API methods that are in Beta / Preview state and could be subjected to significant changes in the future.
 */
export class Preview {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Get a list of projects consumption
     *
     * @remarks
     * Note, this is a preview API and could be subjected to significant changes in the future.
     * Retrieves a list of per-project consumption for the current billing period.
     *
     */
    async listProjectsConsumption(
        req: operations.ListProjectsConsumptionRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.ListProjectsConsumptionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListProjectsConsumptionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/consumption/projects";

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListProjectsConsumptionResponse =
            new operations.ListProjectsConsumptionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.listProjectsConsumption200ApplicationJSONObject = utils.objectToClass(
                        httpRes?.data,
                        operations.ListProjectsConsumption200ApplicationJSON
                    );
                }
                break;
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.generalError = utils.objectToClass(httpRes?.data, shared.GeneralError);
                }
                break;
        }

        return res;
    }
}
