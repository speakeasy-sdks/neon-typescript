/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * These methods allow you to create and manage compute endpoints in your Neon project. For related information, see [Manage compute endpoints](https://neon.tech/docs/manage/endpoints).
 */
export class Endpoint {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    _language: string;
    _sdkVersion: string;
    _genVersion: string;

    constructor(
        defaultClient: AxiosInstance,
        securityClient: AxiosInstance,
        serverURL: string,
        language: string,
        sdkVersion: string,
        genVersion: string
    ) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }

    /**
     * Create an endpoint
     *
     * @remarks
     * Creates an endpoint for the specified branch.
     * An endpoint is a Neon compute instance.
     * There is a maximum of one endpoint per branch.
     * If the specified branch already has an endpoint, the operation fails.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain `branch_id` by listing the project's branches.
     * A `branch_id` has a `br-` prefix.
     * Currently, only the `read_write` endpoint type is supported.
     * For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     *
     */
    async createProjectEndpoint(
        req: operations.CreateProjectEndpointRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateProjectEndpointResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateProjectEndpointRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/projects/{project_id}/endpoints", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "endpointCreateRequest",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this._securityClient || this._defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateProjectEndpointResponse =
            new operations.CreateProjectEndpointResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.endpointOperations = utils.objectToClass(
                        httpRes?.data,
                        shared.EndpointOperations
                    );
                }
                break;
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.generalError = utils.objectToClass(httpRes?.data, shared.GeneralError);
                }
                break;
        }

        return res;
    }

    /**
     * Delete an endpoint
     *
     * @remarks
     * Delete the specified endpoint.
     * An endpoint is a Neon compute instance.
     * Deleting an endpoint drops existing network connections to the endpoint.
     * The deletion is completed when last operation in the chain finishes successfully.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     *
     */
    async deleteProjectEndpoint(
        req: operations.DeleteProjectEndpointRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteProjectEndpointResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteProjectEndpointRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(
            baseURL,
            "/projects/{project_id}/endpoints/{endpoint_id}",
            req
        );

        const client: AxiosInstance = this._securityClient || this._defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteProjectEndpointResponse =
            new operations.DeleteProjectEndpointResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.endpointOperations = utils.objectToClass(
                        httpRes?.data,
                        shared.EndpointOperations
                    );
                }
                break;
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.generalError = utils.objectToClass(httpRes?.data, shared.GeneralError);
                }
                break;
        }

        return res;
    }

    /**
     * Get an endpoint
     *
     * @remarks
     * Retrieves information about the specified endpoint.
     * An endpoint is a Neon compute instance.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     *
     */
    async getProjectEndpoint(
        req: operations.GetProjectEndpointRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetProjectEndpointResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetProjectEndpointRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(
            baseURL,
            "/projects/{project_id}/endpoints/{endpoint_id}",
            req
        );

        const client: AxiosInstance = this._securityClient || this._defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetProjectEndpointResponse =
            new operations.GetProjectEndpointResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.endpointResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.EndpointResponse
                    );
                }
                break;
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.generalError = utils.objectToClass(httpRes?.data, shared.GeneralError);
                }
                break;
        }

        return res;
    }

    /**
     * Get a list of endpoints
     *
     * @remarks
     * Retrieves a list of endpoints for the specified project.
     * An endpoint is a Neon compute instance.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     *
     */
    async listProjectEndpoints(
        req: operations.ListProjectEndpointsRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.ListProjectEndpointsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListProjectEndpointsRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/projects/{project_id}/endpoints", req);

        const client: AxiosInstance = this._securityClient || this._defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListProjectEndpointsResponse =
            new operations.ListProjectEndpointsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.endpointsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.EndpointsResponse
                    );
                }
                break;
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.generalError = utils.objectToClass(httpRes?.data, shared.GeneralError);
                }
                break;
        }

        return res;
    }

    /**
     * Start an endpoint
     *
     * @remarks
     * Starts an endpoint. The endpoint is ready to use
     * after the last operation in chain finishes successfully.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     *
     */
    async startProjectEndpoint(
        req: operations.StartProjectEndpointRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.StartProjectEndpointResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.StartProjectEndpointRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(
            baseURL,
            "/projects/{project_id}/endpoints/{endpoint_id}/start",
            req
        );

        const client: AxiosInstance = this._securityClient || this._defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.StartProjectEndpointResponse =
            new operations.StartProjectEndpointResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.endpointOperations = utils.objectToClass(
                        httpRes?.data,
                        shared.EndpointOperations
                    );
                }
                break;
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.generalError = utils.objectToClass(httpRes?.data, shared.GeneralError);
                }
                break;
        }

        return res;
    }

    /**
     * Suspend an endpoint
     *
     * @remarks
     * Suspend the specified endpoint
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     *
     */
    async suspendProjectEndpoint(
        req: operations.SuspendProjectEndpointRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.SuspendProjectEndpointResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SuspendProjectEndpointRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(
            baseURL,
            "/projects/{project_id}/endpoints/{endpoint_id}/suspend",
            req
        );

        const client: AxiosInstance = this._securityClient || this._defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.SuspendProjectEndpointResponse =
            new operations.SuspendProjectEndpointResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.endpointOperations = utils.objectToClass(
                        httpRes?.data,
                        shared.EndpointOperations
                    );
                }
                break;
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.generalError = utils.objectToClass(httpRes?.data, shared.GeneralError);
                }
                break;
        }

        return res;
    }

    /**
     * Update an endpoint
     *
     * @remarks
     * Updates the specified endpoint. Currently, only changing the associated branch is supported.
     * The branch that you specify cannot have an existing endpoint.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` and `branch_id` by listing your project's endpoints.
     * An `endpoint_id` has an `ep-` prefix. A `branch_id` has a `br-` prefix.
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     *
     * If the returned list of operations is not empty, the endpoint is not ready to use.
     * The client must wait for the last operation to finish before using the endpoint.
     * If the endpoint was idle before the update, the endpoint becomes active for a short period of time,
     * and the control plane suspends it again after the update.
     *
     */
    async updateProjectEndpoint(
        req: operations.UpdateProjectEndpointRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateProjectEndpointResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateProjectEndpointRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(
            baseURL,
            "/projects/{project_id}/endpoints/{endpoint_id}",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "endpointUpdateRequest",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this._securityClient || this._defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "patch",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateProjectEndpointResponse =
            new operations.UpdateProjectEndpointResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.endpointOperations = utils.objectToClass(
                        httpRes?.data,
                        shared.EndpointOperations
                    );
                }
                break;
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.generalError = utils.objectToClass(httpRes?.data, shared.GeneralError);
                }
                break;
        }

        return res;
    }
}
