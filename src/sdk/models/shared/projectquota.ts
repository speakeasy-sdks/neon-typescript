/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Per-project consumption quota. If quota is exceeded, then all active computes
 *
 * @remarks
 * will be automatically suspended and it won't be possible to start them neither
 * with API method call or with incoming proxy connections. The only exception is
 * `logical_size_bytes`, which is applied on per-branch basis, i.e. only compute
 * on the branch with `logical_size` exceeding quota will be suspended.
 *
 * Quotas are enforced based on per-project consumption metrics with the same names,
 * which are reset at the end of each billing period (first day of the month).
 * Logical size is also an exception here, as it represents the total size of data
 * stored in some branch, so it's not reset.
 *
 * Zero quota value or empty mean 'unlimited'.
 *
 */
export class ProjectQuota extends SpeakeasyBase {
  /**
   * The total amount of wall-clock time allowed to be spent by project's compute endpoints.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active_time_seconds" })
  activeTimeSeconds?: number;

  /**
   * The total amount of CPU seconds allowed to be spent by project's compute endpoints.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compute_time_seconds" })
  computeTimeSeconds?: number;

  /**
   * Total amount of data transferred from all project's branches using proxy.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "data_transfer_bytes" })
  dataTransferBytes?: number;

  /**
   * Limit on the logical size of every project's branch.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logical_size_bytes" })
  logicalSizeBytes?: number;

  /**
   * Total amount of data written to all project's branches.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "written_data_bytes" })
  writtenDataBytes?: number;
}
